# -*- coding: utf-8 -*-
"""ASSIGNMENT_03.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1DQKcj2crDWwXSMIOFop2o7sdfptj84-r
"""

import numpy as np
import matplotlib.pyplot as plt
import math
import matplotlib
import pandas as pd

L = 10*np.pi
c = 1
k = 1
w = 1         #omega
N = 300
t_end = 50
dt = 0.05                       # as calculated uisng stability condition
M = int(t_end/dt)
xmax = 0
xmin = -10*np.pi
t = np.linspace(0,t_end,M)
x = np.linspace(xmin, xmax, N)
dx=(10*np.pi)/(N-1)

#dx = (xmax -xmin)/(N-1)                  # space step size
y = np.empty ((M ,N))                      # M -> time grid, N-> space grid
print(y)

# exporting to excel (optional work)

matrix = pd.DataFrame(y)

# determining the name of the file
file_name = 'y.xlsx'

# saving the excel
matrix.to_excel(file_name)
print('DataFrame is written to Excel File successfully.')

nu = c*dt/dx      #CFL number (criteria for stability)
print(nu)
print(M)

#initial conditions
y[0,:] = 0

# boundary conditions
for j in range(0,M):
  y[j,0] = np.cos(w*j*dt)   # left boundary condition


y[:,N-1] =  0             # right boundary condition

#initial velocity condition
for i in range(1,N-1):
  y[1,i] = y[0,i] + (nu**2)*(y[0,i+1]-2*y[0,i]+y[0,i-1])      #initial velocity condition
print(y)
plt.plot(x,y[0,:])
plt.xlim(-35,5)
plt.ylim(-1.5,1.5)   #y at zero time
plt.xlabel('x')
plt.ylabel('y')
plt.title("Initial snapshot")

# Leapfrog scheme to solve the FDE (Central in space and central in time)
for  n in range(1,M-1):
    for i in range(1,N-1):
       y[n+1,i] = 2*y[n,i] - y[n-1,i] + (nu**2)*(y[n,i+1] -2*y[n,i] + y[n,i-1])
print(y)

plt.plot(x,y[700,:])
# interference occurs nearly at t = 31.4 s or at time index 628
plt.xlim(-35,5)
plt.ylim(-2,2)
plt.xlabel('x')
plt.ylabel('y')
plt.title("Travelling Wave")